(defmacro -> (&rest exprs)
	(let ((first (car exprs)) (rest (cdr exprs)))
		(if (not rest)
			first
			(let ((second (car rest)) (rest (cdr rest)))
				(if (listp second)
					`(-> (,(car second) ,first ,@(cdr second)) ,@rest)
					`(-> (,second ,first) ,@rest))))))
(defmacro ->> (&rest exprs)
	(let ((first (car exprs)) (rest (cdr exprs)))
		(if (not rest)
			first
			(let ((second (car rest)) (rest (cdr rest)))
				(if (listp second)
					`(->> (,@second ,first) ,@rest)
					`(->> (,second ,first) ,@rest))))))
